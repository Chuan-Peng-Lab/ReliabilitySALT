install.packages(c("afex", "ape", "arm", "BayesFactor", "bayesplot", "bayestestR", "BDgraph", "blogdown", "bookdown", "brms", "broom", "car", "curl", "devtools", "dplyr", "DT", "dtplyr", "effectsize", "tibble", "tidybayes", "tidygraph", "tidyr", "tidyselect", "tinylabels", "V8", "xfun"))
install.packages(c("afex", "ape", "arm", "BayesFactor", "bayesplot", "bayestestR", "BDgraph", "blogdown", "bookdown", "brms", "broom", "car", "curl", "devtools", "dplyr", "DT", "dtplyr", "effectsize", "tibble", "tidybayes", "tidygraph", "tidyr", "tidyselect", "tinylabels", "V8", "xfun"))
install.packages(c("afex", "ape", "arm", "BayesFactor", "bayesplot", "bayestestR", "BDgraph", "blogdown", "bookdown", "brms", "broom", "car", "curl", "devtools", "dplyr", "DT", "dtplyr", "effectsize", "tibble", "tidybayes", "tidygraph", "tidyr", "tidyselect", "tinylabels", "V8", "xfun"))
install.packages(c("afex", "bootnet", "corrplot", "crul", "devtools", "forecast", "formatR", "ggdist", "glmnet", "GPArotation", "loo", "MCMCglmm", "NetworkToolbox", "parallelly", "plot3D", "psychTools", "rstan", "sem", "semTools"))
install.packages(c("afex", "bootnet", "corrplot", "crul", "devtools", "forecast", "formatR", "ggdist", "glmnet", "GPArotation", "loo", "MCMCglmm", "NetworkToolbox", "parallelly", "plot3D", "psychTools", "rstan", "sem", "semTools"))
install.packages(c("posterior", "RcppArmadillo", "RcppParallel"))
install.packages(c("blogdown", "psych", "psychTools", "qgraph", "rjson"))
setwd("/home/hcp4715/media/study/HCP_cloud/My_Lab/Projects/202205_Liu_Helen_Test_retest_SALT/2_Simulation/2_4_Planned_Analysis")
library(tidyverse)
library(here)
# set working path
cur_dir <-  here::here()
knitr::opts_knit$set(root.dir = 'cur_dir')
rsp_data = read_csv('../2_2_MaterialProc/2_2_1_refData/MS_rep_matchingTask_raw.csv') #reference of fake data
View(rsp_data)
#set parameters
subjects = c(1:34) #34 subjects
session = c(1:6)   #six sessions
matchness = c('Match','Nonmatch') # two matchness
identity = c('Self','Friend','Stranger') # three identities
trialtype = c("prac","exp")# two trial types
ntrials = 78336 #total trials = nsubjects * nsessions * nmatchness * nidentities * (prac*4 + exp*60)
# create empty data frame
dimnames = list(c(),c("Subject","Session","Matchness","Identity","Trialtype"))
simdata = matrix(data = NA,
nrow = ntrials,
ncol = 5,
dimnames = dimnames)
#set parameters
nsamples = ntrials
replace = TRUE
#resample
set.seed(123)
RT = sample(x = rsp_data$RT, # the reference data
size = nsamples,
replace = replace, #sampling with replacement
prob = NULL)
ACC = sample(x = rsp_data$ACC,
size = nsamples,
replace = replace,
prob = NULL)
RT = as.data.frame(RT)
simdata = cbind(simdata, RT)
ACC = as.data.frame(ACC)
simdata = cbind(simdata, ACC)
set.seed(123)
for (i in c(1:ntrials)){
if (i %% 64 == 1 | i %% 64 == 2 | i %% 64 == 3 | i %% 64 == 4){
simdata$Trialtype[i] = 'prac'
}else{
simdata$Trialtype[i] = 'exp'
}
}
set.seed(123)
k = 0 # counter
for (i in c(1:ntrials)){
k = k + 1
if (k <= 64){
simdata$Identity[i] = 'Self'
}else if(k >64 & k <= 128){
simdata$Identity[i] = 'Friend'
}else if(k >128 & k < 192){
simdata$Identity[i] = 'Stranger'
}else{
simdata$Identity[i] = 'Stranger'
k = 0
}
}
View(simdata)
set.seed(123)
k = 0
for (i in c(1:ntrials)){
k = k + 1
if (k <= 192){
simdata$Matchness[i] = 'Match'
}else if(k >192 & k < 384){
simdata$Matchness[i] = 'Nonmatch'
}else{
simdata$Matchness[i] = 'Nonmatch'
k = 0
}
}
set.seed(123)
k = 0
for (i in c(1:ntrials)){
k = k + 1
if (k <= 384){
simdata$Session[i] = 1
}else if(k >384 & k <= 768){
simdata$Session[i] = 2
}else if(k >768 & k <= 1152){
simdata$Session[i] = 3
}else if(k >1152 & k <=1536 ){
simdata$Session[i] = 4
}else if(k >1536 & k <= 1920){
simdata$Session[i] = 5
}else if(k >1920 & k < 2304){
simdata$Session[i] = 6
}else{
simdata$Session[i] = 6
k = 0
}
}
set.seed(123)
k = 0
for (i in c(0:33)){
for (k in c(1:2304)) {
simdata$Subject[2304*i + k] = i+1
}
}
View(simdata)
# check data structure
test <- simdata %>%
dplyr::group_by(Subject, Session, Matchness, Identity, Trialtype) %>%
dplyr::summarise(n=n())
test
# check trial numbers in each condition
k<- 0
w<- 0
for (i in c(1:2448)){
if (test$n[i] !=4 & test$n[i] !=60){
k = k+1
}else{
w = w+1
}
}
k #we can see that the trial numbers are correct
w
# check how many non&wrong-response trials we have
sum(simdata$ACC == -1 |simdata$ACC == 2)
#import used package
library(tidyverse)
library(Rmisc)
library(psych)
library(here)
library(lme4)
library(lmerTest)
cur_dir <-  here::here()
knitr::opts_knit$set(root.dir = 'cur_dir')
#getwd()
df2 <-  read.csv('../2_3_SimData/simulated_data.csv',header = T, sep=",", stringsAsFactors = FALSE) # import pilot data
head(df2)
df2.clean <- df2 %>%
dplyr::filter(ACC != -1 & ACC != 2) %>%         # exclude no response/wrong response
dplyr::filter(Trialtype == "exp") %>%           # filter practice trials
dplyr::filter(!(RT <= 0.2 & RT >= 1.5 )) %>%    # only need 1500ms >RT >200ms
dplyr::rename(RT_sec = RT) %>%
dplyr::mutate(RT_ms = RT_sec*1000) %>%
dplyr::mutate(Match = Matchness) %>%
dplyr::select(Subject,Session,Match,Identity,RT_ms,RT_sec,ACC) %>%
dplyr::mutate_at(vars(Subject, Session,Match,Identity), as.factor)%>%
dplyr::group_by(Subject,Session,Match,Identity)
df2.clean
data_fitting_DDM <- df2.clean %>%
dplyr::group_by(Subject, Session, Match, Identity) %>%
dplyr::select("Subject", "Session", "Match", "Identity", "RT_ms", "ACC")
count(unique(data_fitting_DDM$Subject))
data_fitting_DDM <- df2.clean %>%
dplyr::group_by(Subject, Session, Match, Identity) %>%
dplyr::select("Subject", "Session", "Match", "Identity", "RT_sec", "ACC") # DDM should use second as the unite.
count(unique(data_fitting_DDM$Subject))
#unique(data_fitting_DDM$ACC) #check
###save clean data to a local file
path_out = "../2_3_SimData/"
fileName = paste(path_out, 'simulate_data_fitting_DDM.csv', sep = '')
write_csv(data_fitting_DDM, fileName, col_names = TRUE, append = FALSE)
df2.rt1 <- df2.clean %>%
dplyr::filter(ACC == "1") %>%
dplyr::group_by(Subject, Session, Match, Identity) %>%
dplyr::summarise(mean_rt = mean(RT_ms),
n = n()) %>%
dplyr::select(-"n") %>%
dplyr::ungroup()
df2.rt1
df2.rt1.SPE <- df2.rt1 %>%
dplyr::filter(Match == "Match") %>% # select match
dplyr::group_by(Subject, Session) %>%
tidyr::pivot_wider(names_from = Identity,
values_from = mean_rt) %>%
dplyr::summarise(rt_1_SPE = Self - (Stranger + Friend) / 2) # mean rt of self-match - mean rt of other-match
df2.rt1.SPE
df2.rt1.SPE.ICC <-   df2.rt1.SPE %>%
tidyr::spread(key = Session, value = rt_1_SPE) #wide-format data
df2.rt1.SPE.ICC <- df2.rt1.SPE.ICC[, -1]
psych::ICC(df2.rt1.SPE.ICC, lmer = FALSE) #calculate ICC
df2.rt1.SPE <- df2.rt1 %>%
dplyr::filter(Match == "Match") %>% # select match
dplyr::group_by(Subject, Session) %>%
tidyr::pivot_wider(names_from = Identity,
values_from = mean_rt) %>%
dplyr::summarise(rt_1_SPE = Self - (Stranger + Friend) / 2) # mean rt of self-match - mean rt of other-match
df2.rt1.SPE
df2.rt1.SPE.ICC <-   df2.rt1.SPE %>%
tidyr::spread(key = Session, value = rt_1_SPE) # wide-format data
psych::ICC(df2.rt1.SPE.ICC[, -1], lmer = FALSE) # calculate ICC
df2.rt2 <- df2.clean %>%
dplyr::filter(ACC == "1") %>%
dplyr::group_by(Subject, Session,Identity) %>%
dplyr::summarise(mean_rt = mean(RT_ms),
n = n()) %>%
dplyr::select(-"n") %>%
dplyr::ungroup()
df2.rt2
df2.rt2.SPE <- df2.rt2 %>%
dplyr::group_by(Subject, Session) %>%
tidyr::pivot_wider(names_from = Identity,
values_from = mean_rt) %>%
dplyr::summarise(rt_2_SPE = Self - (Stranger + Friend) / 2)  %>% #mean rt of self - mean rt of other
tidyr::spread(key = Session, value = rt_2_SPE) #wide format according to session
df2.rt2.SPE.ICC <- df2.rt2.SPE[, -1]
psych::ICC(df2.rt2.SPE.ICC, lmer = FALSE)
